-----------------------------
-----------------------------
PRÁCTICA
-----------------------------
-----------------------------

Se presenta una sencilla aplicación de mantenimiento de clientes y pedidos. La práctica consistirá en realizar una modificación de esta aplicación. Hay que realizar las siguientes tareas:
1.- Examinar la aplicación y ver sus partes principales. 
    Es muy importante poder ver un sencillo proyecto funcionando de Java.
    
2.- Instalar la base de datos (de nombre "practica"),
    con las tablas correspondientes y sus campos. 
    Tiene que haber una relación de 1 a n de clientes con pedidos.

3.- Importar el proyecto.

4.- Hacer funcionar la aplicación. 
	En el eclipse hay que meter el jar del driver 
    (seleccionar proyecto/boton derecho/propiedades/java buid path/pestaña libraries/botón add external jars,
   	 y se selecciona el jar del driver jdbc de mysql).

5.-Como se puede comprobar al ejecutar, es una aplicación sencilla que 
	tiene diferentes opciones. Para interaccionar con ella se hace en la consola. 
	Funciona bastante bien, aunque es demasiado básica, y por ello la haremos escalar. 
	IMPORTANTE: INTENTAR HACER UN DISEÑO BIEN HECHO, BASADO EN EL CONCEPTO DE RESPONSABILIDAD (A NIVEL DE PAQUETES, CLASES Y MÉTODOS).

6.- TAREA: Añadir las validaciones y customizaciones que serían necesarias en una aplicación real.

7.- TAREA: Meter los parámetros de conexión en un fichero de configuración externo, al que le llamaremos "practica.properties". 
	Al inicializarse el programa se cargarán los datos de dicho fichero de configuración. 
		Ayuda: https://www.mkyong.com/java/java-properties-file-examples/.

8.- TAREA: Crear una tabla de facturas que tenga una relación de 1 a 1 con pedidos, 
con campos id, dni, num_pedido e importe. Hay que añadir su mantenimiento a las opciones de menú. 
Evidentemente, añadiendo también las validaciones y customizaciones que serían necesarias en una aplicación real. 
Hacer también una opción de estadísticas, mostrando la media, mediana y varianza de los importes.(https://www.youtube.com/watch?v=DB_ZrHND5NM)



9.- TAREA: Añadir una opción de exportar todos los datos de la base de datos a un fichero XML. 
Para ello en primer lugar habrá que volcar los datos a una estructura de datos
 y a continuación generar a partir de dicha estructura de datos el xml correspondiente. 
 Ayuda: Se puede hacer utilizando la especificación DOM (Ejercicio 5 propuesto) o directamente por programación. 
 También existe una tercera opción, la más recomendable quizás, que se muestra en el punto 12.

10.- TAREA OPCIONAL: El que quiera puede migrar todo a Swing (java para hacer ventanas gráficas), 
que se comentará brevemente el último día. No se recomienda, ya que da mucho trabajo.

11.- TAREA OPCIONAL: Se puede hacer otra versión de los métodos de DML con JPA (Java Persistence API),
 que permite el mapeo objeto-relacional, que se comentará el último día. Se recomienda, además da poquísimo trabajo.

12.- TAREA OPCIONAL: El punto 9 se puede hacer también con JAXB, que es el API más sencilla para manipular XML, 
que tiene un enfoque de mapeo objeto-xml. Es muy interesante investigar en esto.
Ayuda: 
http://www.arquitecturajava.com/introduccion-java-jaxb/
http://chuwiki.chuidiang.org/index.php?title=Java_bean_a_XML_con_JAXB
https://www.mkyong.com/java/jaxb-hello-world-example/
https://docs.oracle.com/javase/tutorial/jaxb/intro/examples.html, 











Por ejemplo si hay un cliente con un pedido, no puedes dar de baja el cliente sin dar de baja primero el pedido,
por lo que sería de utilidad en la parte de dar de baja comprobar si el cliente tiene pedidos, para así saber darlo de baja
primero dando de baja el pedido.Tambien apareciendo el numero de pedido que tiene.

Cuando los campos de alta o baja tienen caracteres de "espacio" surge un error en la toma de datos.


*****HACER ENTRADA COMO INVITADO O COMO ADMINISTRADOR, el invitado no puede modificar tablas y el usuario si lo podrá hacer.




DUDA:
en gc.xml en ClientePedidoContainer cuando quiero poner el set a la vez de esta forma: 
	
	   public void setClientePedido(List<Cliente> clientes,List<Pedido> pedidos) {
	        this.clientes = clientes;
	        this.pedidos= pedidos;
	    }
	al exportar no me escribe nada, pero si pongo los set por separado si que logra escribir de forma correcta
	
	
	
	
	
	* En la clase ModifCliente no se puede obtener un valor null ya que en la base de datos DNI es Key. ¿Cómo se haría en ese caso?














	/*  
	  cbPedidos = new JComboBox<>();
	  menuBar.add(cbPedidos);
	  cbPedidos.setFont(new Font("Geomanist", Font.PLAIN, 15));
	  cbPedidos.setModel(new DefaultComboBoxModel(new String[] {"Pedidos", "1.Alta de pedido", "2.Baja de pedido", "3.Modificación de pedido", "4.Listado de pedidos"}));
	  
	  cbClientes = new JComboBox <String>();
	  menuBar.add(cbClientes);
	  cbClientes.setFont(new Font("Geomanist", Font.BOLD, 15));
	  
	  		
	  		cbClientes.setModel(new DefaultComboBoxModel<String>(new String[] {"Clientes", "1.Alta de cliente", "2.Baja de cliente", "3.Modificación de cliente", "4.Listado de cliente", "5.Facturas"}));
	  		
	  		cbClientes.addActionListener(new ActionListener() {
	
	  			public void actionPerformed(ActionEvent e) {
	  				int selectedIndex = cbClientes.getSelectedIndex();
	  			    if (BdOperaciones.esUsuarioInvitado() && selectedIndex != 4) {
	  			        // Usuario invitado, opción seleccionada no es "ListaCliente"
	  			        JOptionPane.showMessageDialog(null, "Acceso no autorizado");
	  			        return;
	  			    }
	  			    
	  			    switch (cbClientes.getSelectedIndex()) {
	  			    	
	  			    	case 0:
	  			    	EjecutarJF ejecutar = new EjecutarJF();
	  			    	ejecutar.setVisible(true);
	  			    	break;
			
	  			        case 1:
	  			                AltaCliente altaCliente = new AltaCliente();
	  			                altaCliente.setVisible(true);
	  			         
	  			            break;
	  			        case 2:
	  			                BajaCliente bajaCliente = new BajaCliente();
	  			                bajaCliente.setVisible(true);
	  			            break;
	  			        case 3:
	  			                ModifCliente modifCliente = new ModifCliente();
	  			                modifCliente.setVisible(true);
	  			            break;
	  			        case 4:
	  			            ListaCliente listaCliente = new ListaCliente();
	  			            listaCliente.setVisible(true);
	  			            break;
	  			        case 5:
	  			        	TablaFacturas tablaFacturas = new TablaFacturas();
	  			        	tablaFacturas.setVisible(true);
	  			        default:
	  			            break;
	  			    }
	  			    dispose();
	  			}
	  		});
	  
	  

	  
	  cbPedidos.addActionListener(new ActionListener() {
	  	
	      public void actionPerformed(ActionEvent e) {
	      	int selectedIndex = cbPedidos.getSelectedIndex();
	  	    if (BdOperaciones.esUsuarioInvitado() && selectedIndex != 4) {
	  	        // Usuario invitado, opción seleccionada no es "ListaCliente"
	  	        JOptionPane.showMessageDialog(null, "Acceso no autorizado");
	  	        return;
	  	    }
	          switch(cbPedidos.getSelectedIndex()) {
	          
	      		case 0:
		    	EjecutarJF ejecutar = new EjecutarJF();
		    	ejecutar.setVisible(true);
		    	break;
		    	
	              case 1:            	
	                  AltaPedido altaPedido = new AltaPedido();
	                  altaPedido.setVisible(true);
	              	
	                  break;
	              	
	              case 2:
	                  BajaPedido bajaPedido = new BajaPedido();
	                  bajaPedido.setVisible(true);
	                  break;     	
	              case 3:
	                  ModifPedido modifPedido = new ModifPedido();
	                  modifPedido.setVisible(true);	        	
	                  break;
	              	
	              case 4:
	                  ListaPedido listaPedido = new ListaPedido();
	                  listaPedido.setVisible(true);
	                  break;
	          }
	          dispose();
	      }
	   
	  });*/
